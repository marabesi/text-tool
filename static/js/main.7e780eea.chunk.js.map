{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","charCount","setCharCount","_useState5","_useState6","wordCount","setWordCount","_useState7","_useState8","mostFrequent","setMostFrequent","_useState9","_useState10","stopWords","setStopWords","useEffect","length","strings","split","listOfStrings","filter","_step","_iterator","_createForOfIteratorHelper","s","n","done","stop","value","includes","err","e","f","empty","word","push","rank","count","_loop","_word","found","find","sortByMostFrequent","sort","a","b","i","_jsxs","className","children","_jsx","style","minHeight","onChange","changed","target","defaultValue","rows","placeholder","cleanedStopWords","map","replace","onStopWordsChanged","frequent","index","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e780eea.chunk.js","sourcesContent":["import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { useEffect, useState } from 'react';\n\ninterface MostFrequent {\n  word: string\n  count: number\n  rank: number\n}\n\nfunction App() {\n  const [text, setText] = useState<string>('');\n  const [charCount, setCharCount] = useState<number>();\n  const [wordCount, setWordCount] = useState<number>();\n  const [mostFrequent, setMostFrequent] = useState<MostFrequent[]>([]);\n  const [stopWords, setStopWords] = useState<string[]>([]);\n\n  useEffect(() => {\n    setCharCount(text.length);\n    const strings = text.split(' ');\n\n    if (text) {\n      let listOfStrings = strings.filter(strings => strings !== '');\n\n      if (stopWords.length) {\n        listOfStrings = listOfStrings.filter(strings => {\n          for (let stop of stopWords) {\n            if (strings.includes(stop)) {\n              return false;\n            }\n          }\n          return true;\n        });\n      }\n\n      const empty = [];\n      for (const word in listOfStrings) {\n        empty.push(\n          { rank: 0, word: listOfStrings[word], count: 0 }\n        );\n      }\n\n      for (const word in listOfStrings) {\n        const found: MostFrequent | undefined = empty.find(strings => strings.word === listOfStrings[word]);\n        if (found) {\n          found.count++;\n        }\n      }\n\n      const sortByMostFrequent = empty.sort((a, b) => b.count - a.count);\n\n      for (let i = 0; i < sortByMostFrequent.length; i++) {\n        sortByMostFrequent[i].rank = i + 1;\n      }\n\n      setMostFrequent(sortByMostFrequent);\n      setWordCount(listOfStrings.length);\n\n    } else {\n      setWordCount(0);\n      setMostFrequent([]);\n    }\n  }, [text, stopWords]);\n\n  const onStopWordsChanged = (value: string) => {\n    const strings = value.split(',');\n    const cleanedStopWords = strings\n      .filter(stop => stop !== '')\n      .map(stop => stop.replace('\\n', ''));\n\n    setStopWords(cleanedStopWords);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <div className=\"flex flex-col w-4/5\">\n        <div className=\"flex\">\n          <p className=\"p-2 m-2 border-2 w-60\">\n            Chars: {charCount}\n          </p>\n          <p className=\"p-2 m-2 border-2 w-60\">\n            Words: {wordCount}\n          </p>\n        </div>\n\n        <div className=\"m-2\">\n          <textarea\n            className=\"border-2 w-full outline-none\"\n            style={{ minHeight: '70vh' }}\n            data-testid=\"text-area\"\n            onChange={changed => setText(changed.target.value)}\n            defaultValue={text}\n            rows={10}\n            placeholder=\"Type here\"\n          />\n          <textarea\n            data-testid=\"stop-words-area\"\n            className=\"border-2 w-full outline-none\"\n            style={{ minHeight: '15vh' }}\n            onChange={changed => onStopWordsChanged(changed.target.value)}\n            placeholder=\"Stop words: the, an, I\"\n          />\n        </div>\n      </div>\n      <div className=\"overflow-y-scroll w-1/5\">\n        <h1 className=\"font-bold\">Most frequent words</h1>\n        {mostFrequent.map((frequent, index) => <p key={index}>{frequent.rank}. {frequent.word}: {frequent.count}</p>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}