{"version":3,"sources":["use-cases/types/StopWords.ts","reactjs/App.tsx","presenters/word-count.ts","use-cases/words-count.ts","reportWebVitals.ts","index.tsx"],"names":["defaultStopWords","replace","App","text","setText","useState","charCount","setCharCount","wordCount","setWordCount","mostFrequent","setMostFrequent","stopWords","setStopWords","isStopWordsEnabled","setIsStopWordsEnabled","originalStopWords","setOriginalStopWords","useEffect","onStopWordsChanged","length","strings","split","listOfStrings","sortByMostFrequent","filter","stop","includes","empty","word","push","rank","count","found","find","sort","a","b","i","wordCountFor","format","value","cleanedStopWords","map","_jsxs","className","children","htmlFor","_jsx","type","id","checked","onChange","changed","target","style","minHeight","defaultValue","rows","placeholder","disabled","frequent","index","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.ff340a8f.chunk.js","sourcesContent":["export const defaultStopWords = `not,\nno,\nin,\nif,\nget,\na,\nan,\nthis,\nhe,\nshe,\nof,\nfor,\nor,\nby,\nis,\nto,\non,\nwe,\nfrom,\nwhy,\nyou,\nas,\n#,\n-,\nit,\nits,\nit's,\nwill,\nthe,\nthat,\nfrom,\nhas,\nby,\nwas,\nwere,\nwith,\nsuch,\nbe,\nso`.replace(/\\n/g, '');\n","import { useEffect, useState } from 'react';\nimport { defaultStopWords } from '../use-cases/types/StopWords';\nimport { MostFrequent } from '../use-cases/types/types';\nimport { format } from '../presenters/word-count';\n\nfunction App() {\n  const [text, setText] = useState<string>('');\n  const [charCount, setCharCount] = useState<number>();\n  const [wordCount, setWordCount] = useState<number>();\n  const [mostFrequent, setMostFrequent] = useState<MostFrequent[]>([]);\n  const [stopWords, setStopWords] = useState<string[]>([]);\n  const [isStopWordsEnabled, setIsStopWordsEnabled] = useState<boolean>(true);\n  const [originalStopWords, setOriginalStopWords] = useState<string>(defaultStopWords);\n\n  useEffect(() => {\n    onStopWordsChanged(defaultStopWords);\n  }, []);\n\n  useEffect(() => {\n    setCharCount(text.length);\n    const strings = text.split(' ');\n    let { listOfStrings, sortByMostFrequent } = format(strings, stopWords, isStopWordsEnabled);\n\n    setMostFrequent(sortByMostFrequent);\n    setWordCount(listOfStrings.length);\n  }, [text, stopWords, isStopWordsEnabled]);\n\n  const onStopWordsChanged = (value: string) => {\n    setOriginalStopWords(value);\n    const strings = value.split(',');\n    const cleanedStopWords = strings\n      .filter(stop => stop !== '')\n      .map(stop => stop.replace('\\n', ''));\n\n    setStopWords(cleanedStopWords);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <div className=\"flex flex-col w-4/5\">\n        <div className=\"flex items-center\">\n          <p className=\"p-2 m-2 border-2 w-60\">\n            Chars: {charCount}\n          </p>\n          <p className=\"p-2 m-2 border-2 w-60\">\n            Words: {wordCount}\n          </p>\n          <label htmlFor=\"stopwords\">\n            Ignore stop words\n            <input\n              type=\"checkbox\"\n              id=\"stopwords\"\n              className=\"ml-2\"\n              checked={isStopWordsEnabled}\n              onChange={changed => setIsStopWordsEnabled(changed.target.checked)}\n            />\n          </label>\n        </div>\n        <div className=\"m-2\">\n          <textarea\n            className=\"border-2 w-full outline-none\"\n            style={{ minHeight: '70vh' }}\n            data-testid=\"text-area\"\n            onChange={changed => setText(changed.target.value)}\n            defaultValue={text}\n            rows={10}\n            placeholder=\"Type here\"\n          />\n          <textarea\n            data-testid=\"stop-words-area\"\n            className=\"border-2 w-full outline-none\"\n            style={{ minHeight: '15vh' }}\n            onChange={changed => onStopWordsChanged(changed.target.value)}\n            placeholder=\"Stop words: the, an, I\"\n            defaultValue={originalStopWords}\n            disabled={!isStopWordsEnabled}\n          />\n        </div>\n      </div>\n      <div className=\"overflow-y-scroll w-1/5\">\n        <h1 className=\"font-bold\">Most frequent words</h1>\n        {mostFrequent.map((frequent, index) => <p key={index}>{frequent.rank}. {frequent.word}: {frequent.count}</p>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { WordCountResult } from '../use-cases/types/types';\nimport { wordCountFor } from '../use-cases/words-count';\n\nexport function format(text: string[], stopWords: string[], isStopWordsEnabled: boolean) : WordCountResult  {\n  if (text) {\n    return wordCountFor(text, stopWords, isStopWordsEnabled);\n  }\n\n  return {\n    listOfStrings: [], sortByMostFrequent: []\n  };\n}","import { MostFrequent, WordCountResult } from './types/types';\n\nexport function wordCountFor(strings: string[], stopWords: string[], isStopWordsEnabled: boolean): WordCountResult {\n  let listOfStrings = strings.filter(strings => strings !== '');\n\n  if (stopWords.length && isStopWordsEnabled) {\n    listOfStrings = listOfStrings.filter(strings => {\n      for (let stop of stopWords) {\n        if (strings.includes(stop)) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n\n  const empty = [];\n  for (const word in listOfStrings) {\n    empty.push(\n      { rank: 0, word: listOfStrings[word], count: 0 }\n    );\n  }\n\n  for (const word in listOfStrings) {\n    const found: MostFrequent | undefined = empty.find(strings => strings.word === listOfStrings[word]);\n    if (found) {\n      found.count++;\n    }\n  }\n\n  const sortByMostFrequent = empty.sort((a, b) => b.count - a.count);\n\n  for (let i = 0; i < sortByMostFrequent.length; i++) {\n    sortByMostFrequent[i].rank = i + 1;\n  }\n  return { listOfStrings, sortByMostFrequent };\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createRoot } from 'react-dom/client';\nimport React from 'react';\nimport App from './reactjs/App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nconst root = createRoot(document.getElementById('root')!);\n\nroot.render(<React.StrictMode>\n  <App />\n</React.StrictMode>);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}