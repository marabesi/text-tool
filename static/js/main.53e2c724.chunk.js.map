{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","text","setText","charCount","setCharCount","wordCount","setWordCount","mostFrequent","setMostFrequent","useEffect","length","strings","split","listOfStrings","filter","empty","word","push","rank","count","found","find","sortByMostFrequent","sort","a","b","i","className","style","minHeight","onChange","changed","target","value","defaultValue","rows","placeholder","map","frequent","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAmFeA,MA1Ef,WACE,MAAwBC,mBAAiB,IAAzC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,qBAAlC,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,qBAAlC,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAwCN,mBAAyB,IAAjE,mBAAOO,EAAP,KAAqBC,EAArB,KAsCA,OApCAC,qBAAU,WACRL,EAAaH,EAAKS,QAClB,IAAMC,EAAUV,EAAKW,MAAM,KAEvBX,EAAO,WACT,IAAMY,EAAgBF,EAAQG,QAAO,SAAAH,GAAO,MAAgB,KAAZA,CAAJ,IAEtCI,EAAQ,GACd,IAAK,IAAMC,KAAQH,EACjBE,EAAME,KACJ,CAAEC,KAAM,EAAGF,KAAMH,EAAcG,GAAOG,MAAO,IANzC,eAUGH,GACT,IAAMI,EAAkCL,EAAMM,MAAK,SAAAV,GAAO,OAAIA,EAAQK,OAASH,EAAcG,EAAnC,IACtDI,GACFA,EAAMD,OAbF,EAUR,IAAK,IAAMH,KAAQH,EAAgB,EAAxBG,GASX,IAFA,IAAMM,EAAqBP,EAAMQ,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEN,MAAQK,EAAEL,KAAtB,IAE7BO,EAAI,EAAGA,EAAIJ,EAAmBZ,OAAQgB,IAC7CJ,EAAmBI,GAAGR,KAAOQ,EAAI,EAGnClB,EAAgBc,GAChBhB,EAAaO,EAAcH,OAxBnB,CAAC,IA2BTJ,EAAa,GACbE,EAAgB,IAEnB,GAAE,CAACP,IAGF,sBAAK0B,UAAU,gCAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,sBAAKA,UAAU,OAAf,UACE,oBAAGA,UAAU,wBAAb,oBACUxB,KAEV,oBAAGwB,UAAU,wBAAb,oBACUtB,QAIZ,qBAAKsB,UAAU,MAAf,SACE,0BACEA,UAAU,+BACVC,MAAO,CAAEC,UAAW,QACpB,cAAY,YACZC,SAAU,SAAAC,GAAO,OAAI7B,EAAQ6B,EAAQC,OAAOC,MAA3B,EACjBC,aAAcjC,EACdkC,KAAM,GACNC,YAAY,mBAIlB,sBAAKT,UAAU,0BAAf,UACE,oBAAIA,UAAU,YAAd,iCACCpB,EAAa8B,KAAI,SAACC,EAAUC,GAAX,OAAqB,8BAAgBD,EAASpB,KAAzB,KAAiCoB,EAAStB,KAA1C,KAAkDsB,EAASnB,QAAnDoB,EAA7B,SAIzB,ECnEcC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,E,MCNDQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.53e2c724.chunk.js","sourcesContent":["import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { useEffect, useState } from 'react';\n\ninterface MostFrequent {\n  word: string\n  count: number\n  rank: number\n}\n\nfunction App() {\n  const [text, setText] = useState<string>('');\n  const [charCount, setCharCount] = useState<number>();\n  const [wordCount, setWordCount] = useState<number>();\n  const [mostFrequent, setMostFrequent] = useState<MostFrequent[]>([]);\n\n  useEffect(() => {\n    setCharCount(text.length);\n    const strings = text.split(' ');\n\n    if (text) {\n      const listOfStrings = strings.filter(strings => strings !== '');\n\n      const empty = [];\n      for (const word in listOfStrings) {\n        empty.push(\n          { rank: 0, word: listOfStrings[word], count: 0 }\n        );\n      }\n\n      for (const word in listOfStrings) {\n        const found: MostFrequent | undefined = empty.find(strings => strings.word === listOfStrings[word]);\n        if (found) {\n          found.count++;\n        }\n      }\n\n      const sortByMostFrequent = empty.sort((a, b) => b.count - a.count);\n\n      for (let i = 0; i < sortByMostFrequent.length; i++) {\n        sortByMostFrequent[i].rank = i + 1;\n      }\n\n      setMostFrequent(sortByMostFrequent);\n      setWordCount(listOfStrings.length);\n\n    } else {\n      setWordCount(0);\n      setMostFrequent([]);\n    }\n  }, [text]);\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <div className=\"flex flex-col w-4/5\">\n        <div className=\"flex\">\n          <p className=\"p-2 m-2 border-2 w-60\">\n            Chars: {charCount}\n          </p>\n          <p className=\"p-2 m-2 border-2 w-60\">\n            Words: {wordCount}\n          </p>\n        </div>\n\n        <div className=\"m-2\">\n          <textarea\n            className=\"border-2 w-full outline-none\"\n            style={{ minHeight: '90vh' }}\n            data-testid=\"text-area\"\n            onChange={changed => setText(changed.target.value)}\n            defaultValue={text}\n            rows={10}\n            placeholder=\"Type here\"\n          />\n        </div>\n      </div>\n      <div className=\"overflow-y-scroll w-1/5\">\n        <h1 className=\"font-bold\">Most frequent words</h1>\n        {mostFrequent.map((frequent, index) => <p key={index}>{frequent.rank}. {frequent.word}: {frequent.count}</p>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}